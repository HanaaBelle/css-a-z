body {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* Comportement 1 : Les images sont des éléments "inline" donc normalement la largeur "width" et la hauteur "height" ne fonctionnent 
pas mais vu que là une image a déjà une hauteur et une largeur et bien ça va fonctionner avec les images <img> (éléments remplacés) 
l'utilisation du "width" et "height" ça fonctionne même si ce sont des éléments de type "inline". 
Les images sont donc des éléments qui vont avoir des propriétés en dehors de la porté du CSS notamment ici pour les images (comme 
éléments remplacés on a aussi les vidéos et des éléments qui sont beaucoup plus confidentiels qu'on utilise pas trop) donc en général
lorsqu'on parle d'éléments remplacés on désigne les images ou les vidéos.

Comportenement 2 : Même en changeant la largeur "width" en avant (argrandissement) ou en arrière (rétrécissement) ça ne se déforme 
pas et ça garde les mêmes proportions "intrincis size: 640 x 440 px" et c'est pratique.
Si on change juste la hauteur "height" ou juste la largeur "width" avec une valeur absolue (valeur en pixel "px" c'est absolu parce 
qu'un pixel dans l'écran c'est toujours un pixel ça ne change pas) et bien ça ne se déforme pas parce que ça va changer la hauteur 
en fonction de ce qu'on lui donne comme valeur comme ici "600px" pour toujours préserver le bon "ratio" qu'on a ça va donc donner 
une auteur si on va dans l'inspecteur d'élément dans section "Computed" ici c'est "416.5px" afin que l'image ne se déforme pas et en 
changeant la valeur du "height" ça va encore passer à une autre valeur pour permettre de garder le "ratio" ce qui est pratique 
notamment qu'on veut que ça soit "responsive" (reactif) et donc en changeant la valeur de la largeur par "100%" ça s'adapte 
directement au navigateur sachant que "100%" fait référence au parent qui est ici <body> qui hérite la valeur du "width" de son 
parent <html> qui va hériter sa valeur depuis son parent "view port" et donc ici <img> hérite de <body> sa largeur dans ce cas là et
donc si sa largeur change au "view port" (la fenêtre du browser) et bien celle du <img> va s'adapter comme ça directement puisque 
<img> est un descendant de "view port" d'où on sort notre largeur de <img> qui hérite automatiquement de <body> qui lui hérite de
<html> qui hérite de "view port"

Comportenement 3 : On peut aussi voir le comportement de "max-width" qui est légerement différent c-à-d si on est en dessous des
proportions en terme de largeur ça s'adapte en dessous de "640px" ici mais à partir de "640px" et bien parce qu'on a "max-width" ça
n'ira pas au dessus de cette largeur de base de notre image donc "max-width: 100%" des proportions de basequ'on a ça va être "100%"
de notre largeur et c'est un comportement spécial avec les images si on met "max-width: 100%" on ne peut pas aller au dessus comme
ça de la taille de base de notre image et donc ça ne peut pas la déformer en terme de qualité ça sera tout le temps de bon "ratio" 
et on perdera pas de qualité comme ça par contre à partir du moment où on rétrécit la fenêtre ça va créer du blanc sur le côté donc
c'est à choisir entre "width" et "max-width" suivant ce qu'on voudrait faire
*/

/* Comportenement 4 : la question qui se pose, que se passe t-il si on change à la "width" et à la fois "height" 
aux valeur "260px" et "250px" qui n'est pas son "ratio" de base, et bien la réponse est que ça va se déformer parce que de manière 
absolue on l'a forcé avec ses valeurs a avoir des proportions qui ne sont pas des proportions originelles (dangereux comme même)
Mais il existe une proprité magique quipermet de régler ce problème c'est la propriété "object-fit" avec la valeur "cover" ça 
force à bien couvrir l'espace donné mais on est autorisé à "crop" c'est couper des partie de l'image à fin de respecter les 
"ratio" de base et donc de ne pas déformer l'image et du coup on perd un peu des éléments de l'image en haut, en bas, à gauche et 
à droite mais ça s'adapte (c'est pratique à retenir) 
Il y aussi une autre propriété "contain" qui au lieu de "crop" c-à-d couper des parties de l'image ça garde à tout pris le bon 
"ratio" sans "crop" et donc de lieu de couper ça créer des blancs en haut et en bas */

/* Comportenement 5 : Le cas où l'image est trop grande il y a la propriété "object-position" qui nous permet de se déplacer sur
l'image comme avec la valeur "left" en gardant la largeur et la hauteur à la valeur "450px" et là on remarque qu'il y a "crop" des 
éléments de l'image avec la valeur "cover" et bien on peut choisir dans quel endroit de l'image on voudrait être ça pourrait être
à "gauche" ou à "droite" et on peut aussi mettre des valeur comme "object-position: 50% 50%;" qui signifie "center" et donc cette
propriété permet de se déplacer sur nos images pour montrer ce qu'on souhaite montrer si les choses importantes sur les images se 
trouvent à des endroit précis comme à gauche, à droite, en haut ou en bas*/
img {
  /* 
  max-width: 100%; 
  */

  width: 450px;
  height: 450px;

  object-fit: cover;
  /* 
  object-fit: contain;
  */

  object-position: left;
}